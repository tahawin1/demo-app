pipeline {
    agent any

    environment {
        SONARQUBE_INSTALLATION = 'sonarQube'
        ZAP_IMAGE = 'ghcr.io/zaproxy/zaproxy:stable'
        TARGET_URL = 'http://demo.testfire.net'
        MISTRAL_API_KEY = credentials('taha-jenkins')
        MISTRAL_API_URL = 'https://api.mistral.ai/v1/chat/completions'
        
        APP_NAME = "${env.JOB_NAME}-${env.BUILD_NUMBER}".toLowerCase().replaceAll(/[^a-z0-9-]/, '-')
        IMAGE_NAME = "demo-app"
        DOCKER_REGISTRY = "localhost:5000"
    }

    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Clonage du d√©p√¥t..."
                git 'https://github.com/tahawin1/demo-app'

                sh '''
                    mkdir -p security-reports
                    mkdir -p scripts
                    mkdir -p zap-reports
                    mkdir -p trivy-reports
                '''
            }
        }

        stage('Analyse SonarQube') {
            steps {
                script {
                    try {
                        echo "üöÄ D√©but de l'analyse SonarQube..."

                        writeFile file: 'sonar-project.properties', text: '''# Configuration SonarQube
sonar.projectKey=demo-app
sonar.projectName=Demo App Security Pipeline
sonar.sources=.
sonar.exclusions=**/node_modules/**,**/target/**,**/*.log,**/security-reports/**,**/scripts/**,**/zap-reports/**,**/trivy-reports/**
sonar.sourceEncoding=UTF-8
sonar.javascript.lcov.reportPaths=coverage/lcov.info
sonar.java.source=11
sonar.python.coverage.reportPaths=coverage.xml
sonar.qualitygate.wait=true
'''

                        withSonarQubeEnv('sonarQube') {
                            sh '''
                                if ! command -v sonar-scanner >/dev/null 2>&1; then
                                    wget -q https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
                                    unzip -q sonar-scanner-cli-4.8.0.2856-linux.zip
                                    SCANNER_CMD="./sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner"
                                else
                                    SCANNER_CMD="sonar-scanner"
                                fi

                                ${SCANNER_CMD} \\
                                    -Dsonar.projectKey=demo-app \\
                                    -Dsonar.projectName="Demo App Security Pipeline" \\
                                    -Dsonar.sources=. \\
                                    -Dsonar.exclusions="**/node_modules/**,**/target/**,**/*.log,**/security-reports/**,**/zap-reports/**,**/trivy-reports/**" \\
                                    -Dsonar.host.url="${SONAR_HOST_URL}" \\
                                    -Dsonar.login="${SONAR_AUTH_TOKEN}" \\
                                    -Dsonar.qualitygate.wait=true
                            '''
                        }
                        echo "‚úÖ Analyse SonarQube termin√©e !"
                    } catch (Exception e) {
                        echo "‚ùå Erreur SonarQube: ${e.message}"
                        error("Pipeline arr√™t√© - Erreur lors de l'analyse SonarQube")
                    }
                }
            }
        }

        stage('Quality Gate SonarQube') {
            steps {
                script {
                    try {
                        echo "üîç V√©rification du Quality Gate SonarQube..."
                        timeout(time: 5, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            
                            echo "üìä Statut du Quality Gate: ${qg.status}"
                            
                            if (qg.status != 'OK') {
                                echo "‚ùå Quality Gate SonarQube √âCHOU√â!"
                                echo "üìã D√©tails des conditions √©chou√©es:"
                                
                                // Afficher les m√©triques qui ont √©chou√©
                                if (qg.conditions) {
                                    qg.conditions.each { condition ->
                                        echo "   ‚Ä¢ ${condition.metricKey}: ${condition.actualValue} (seuil: ${condition.errorThreshold})"
                                    }
                                }
                                
                                // G√©n√©rer un rapport d√©taill√©
                                writeFile file: 'security-reports/sonarqube-quality-gate-failure.txt', text: """
√âCHEC DU QUALITY GATE SONARQUBE
===============================
Statut: ${qg.status}
Build: ${BUILD_NUMBER}
Date: ${new Date()}

Conditions √©chou√©es:
${qg.conditions?.collect { "- ${it.metricKey}: ${it.actualValue} (seuil: ${it.errorThreshold})" }?.join('\n') ?: 'Aucun d√©tail disponible'}

Action requise:
- Corriger les probl√®mes de qualit√© de code
- Relancer l'analyse SonarQube
- V√©rifier que tous les seuils sont respect√©s
"""
                                
                                error("üö® PIPELINE ARR√äT√â - Quality Gate SonarQube √©chou√©. Veuillez corriger les probl√®mes de qualit√© de code avant de continuer.")
                            } else {
                                echo "‚úÖ Quality Gate SonarQube R√âUSSI!"
                                
                                // G√©n√©rer un rapport de succ√®s
                                writeFile file: 'security-reports/sonarqube-quality-gate-success.txt', text: """
SUCC√àS DU QUALITY GATE SONARQUBE
===============================
Statut: ${qg.status}
Build: ${BUILD_NUMBER}
Date: ${new Date()}

Toutes les conditions du quality gate ont √©t√© respect√©es.
Le code respecte les standards de qualit√© d√©finis.
"""
                            }
                        }
                    } catch (Exception e) {
                        echo "‚è±Ô∏è Erreur Quality Gate: ${e.message}"
                        error("üö® PIPELINE ARR√äT√â - Erreur lors de la v√©rification du Quality Gate SonarQube")
                    }
                }
            }
        }

        stage('Analyse SCA avec Trivy') {
            steps {
                script {
                    try {
                        echo 'üîç Analyse des d√©pendances avec Trivy (SCA)...'
                        sh '''
                            # Scan des vuln√©rabilit√©s du syst√®me de fichiers
                            trivy fs --format json --output trivy-reports/trivy-sca-report.json . || echo "‚ö†Ô∏è Trivy SCA avec avertissements"
                            trivy fs --format table --output trivy-reports/trivy-sca-report.txt . || echo "‚ö†Ô∏è Trivy SCA avec avertissements"
                            
                            # Copier vers security-reports pour compatibilit√©
                            cp trivy-reports/trivy-sca-report.txt security-reports/ || true
                            cp trivy-reports/trivy-sca-report.json security-reports/ || true
                        '''
                        echo "‚úÖ Analyse SCA termin√©e"
                    } catch (Exception e) {
                        echo "‚ùå Erreur SCA: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Build Docker') {
            steps {
                script {
                        echo 'üèóÔ∏è Construction Docker...'
                    sh '''
                        # Construire l'image Docker
                        docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} .
                        docker tag ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                        
                        # Push vers le registry
                        docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}
                        docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                    '''
                        echo "‚úÖ Docker build termin√©"
                }
            }
        }

        stage('Scan Docker Image') {
            steps {
                script {
                    echo 'üîé Scan Docker avec Trivy...'
                    sh '''
                        # Scan de l'image Docker
                        trivy image --format table --output trivy-reports/image-scan-report.txt ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}
                        trivy image --format json --output trivy-reports/image-scan-report.json ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}
                        
                        # Copier vers security-reports pour compatibilit√©
                        cp trivy-reports/image-scan-report.txt security-reports/ || true
                        cp trivy-reports/image-scan-report.json security-reports/ || true
                    '''
                    echo "‚úÖ Scan d'image termin√©"
                }
            }
        }

        stage('Sign Docker Image') {
            steps {
                script {
                    try {
                        echo '‚úçÔ∏è Signature avec Cosign...'
                        withCredentials([string(credentialsId: 'cosign-key', variable: 'COSIGN_PASSWORD')]) {
                            sh '''
                                # Signer l'image avec Cosign
                                cosign sign --key env://COSIGN_PASSWORD ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}
                                
                                # V√©rifier la signature
                                cosign verify --key env://COSIGN_PASSWORD ${DOCKER_REGISTRY}/${IMAGE_NAME}:${BUILD_NUMBER}
                            '''
                        }
                        echo "‚úÖ Image sign√©e avec succ√®s"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Erreur signature Cosign: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Analyse DAST avec ZAP') {
            steps {
                script {
                    try {
                        echo "üß™ Analyse dynamique avec ZAP..."
                        sh '''
                            # Cr√©er le r√©pertoire pour les rapports ZAP
                            mkdir -p zap-reports
                            
                            # Lancer ZAP avec diff√©rents formats de rapport
                            docker run -v $(pwd)/zap-reports:/zap/wrk/:rw -t ${ZAP_IMAGE} zap-baseline.py \\
                                -t ${TARGET_URL} \\
                                -r zap-baseline-report.html \\
                                -J zap-baseline-report.json \\
                                -x zap-baseline-report.xml || true
                            
                            # Copier les rapports vers security-reports
                            cp zap-reports/*.html security-reports/ 2>/dev/null || echo "Aucun rapport HTML ZAP trouv√©"
                            cp zap-reports/*.json security-reports/ 2>/dev/null || echo "Aucun rapport JSON ZAP trouv√©"
                            cp zap-reports/*.xml security-reports/ 2>/dev/null || echo "Aucun rapport XML ZAP trouv√©"
                        '''
                        echo "‚úÖ Analyse DAST ZAP termin√©e"
                    } catch (Exception e) {
                        echo "‚ùå Erreur ZAP: ${e.message}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Quality Gate OWASP ZAP') {
            steps {
                script {
                    try {
                        echo "üîç V√©rification du Quality Gate OWASP ZAP..."
                        
                        // Analyser les r√©sultats ZAP
                        def zapResults = [:]
                        def zapFailures = []
                        
                        // V√©rifier si le rapport JSON existe
                        if (fileExists('zap-reports/zap-baseline-report.json') || fileExists('security-reports/zap-baseline-report.json')) {
                            
                            def reportFile = fileExists('zap-reports/zap-baseline-report.json') ? 'zap-reports/zap-baseline-report.json' : 'security-reports/zap-baseline-report.json'
                            
                            // Analyser le fichier JSON ZAP
                            def zapJson = readJSON file: reportFile
                            
                            // Compter les alertes par niveau de risque
                            def highRisk = 0
                            def mediumRisk = 0
                            def lowRisk = 0
                            def infoRisk = 0
                            
                            if (zapJson.site && zapJson.site[0] && zapJson.site[0].alerts) {
                                zapJson.site[0].alerts.each { alert ->
                                    switch(alert.riskdesc?.toLowerCase()) {
                                        case ~/.*high.*/:
                                            highRisk++
                                            break
                                        case ~/.*medium.*/:
                                            mediumRisk++
                                            break
                                        case ~/.*low.*/:
                                            lowRisk++
                                            break
                                        default:
                                            infoRisk++
                                    }
                                }
                            }
                            
                            // Stocker les r√©sultats
                            zapResults = [
                                high: highRisk,
                                medium: mediumRisk,
                                low: lowRisk,
                                info: infoRisk
                            ]
                            
                            echo "üìä R√©sultats ZAP:"
                            echo "   ‚Ä¢ Risque √âlev√©: ${highRisk}"
                            echo "   ‚Ä¢ Risque Moyen: ${mediumRisk}"
                            echo "   ‚Ä¢ Risque Faible: ${lowRisk}"
                            echo "   ‚Ä¢ Informationnel: ${infoRisk}"
                            
                            // D√©finir les seuils de tol√©rance
                            def maxHighRisk = 0      // Aucun risque √©lev√© autoris√©
                            def maxMediumRisk = 3    // Maximum 3 risques moyens
                            def maxLowRisk = 10      // Maximum 10 risques faibles
                            
                            // V√©rifier les seuils
                            if (highRisk > maxHighRisk) {
                                zapFailures.add("Risque √âLEV√â d√©tect√©: ${highRisk} (max autoris√©: ${maxHighRisk})")
                            }
                            
                            if (mediumRisk > maxMediumRisk) {
                                zapFailures.add("Risque MOYEN excessif: ${mediumRisk} (max autoris√©: ${maxMediumRisk})")
                            }
                            
                            if (lowRisk > maxLowRisk) {
                                zapFailures.add("Risque FAIBLE excessif: ${lowRisk} (max autoris√©: ${maxLowRisk})")
                            }
                            
                        } else {
                            echo "‚ö†Ô∏è Rapport ZAP JSON non trouv√©, analyse basique des logs..."
                            
                            // Analyser les logs ou fichiers texte si disponibles
                            sh '''
                                if [ -f zap-reports/zap-baseline-report.html ] || [ -f security-reports/zap-baseline-report.html ]; then
                                    echo "Rapport HTML ZAP trouv√©"
                                else
                                    echo "‚ö†Ô∏è Aucun rapport ZAP d√©taill√© trouv√©"
                                fi
                            '''
                        }
                        
                        // G√©n√©rer le rapport de quality gate
                        if (zapFailures.size() > 0) {
                            echo "‚ùå Quality Gate OWASP ZAP √âCHOU√â!"
                            echo "üìã Probl√®mes d√©tect√©s:"
                            zapFailures.each { failure ->
                                echo "   ‚Ä¢ ${failure}"
                            }
                            
                            // G√©n√©rer un rapport d√©taill√© d'√©chec
                            writeFile file: 'security-reports/zap-quality-gate-failure.txt', text: """
√âCHEC DU QUALITY GATE OWASP ZAP
==============================
Build: ${BUILD_NUMBER}
Date: ${new Date()}
URL cible: ${TARGET_URL}

R√©sultats ZAP:
- Risque √âlev√©: ${zapResults.high ?: 'N/A'}
- Risque Moyen: ${zapResults.medium ?: 'N/A'}
- Risque Faible: ${zapResults.low ?: 'N/A'}
- Informationnel: ${zapResults.info ?: 'N/A'}

Probl√®mes d√©tect√©s:
${zapFailures.join('\n')}

Actions requises:
- Examiner le rapport d√©taill√© ZAP
- Corriger les vuln√©rabilit√©s de s√©curit√©
- Relancer les tests de s√©curit√©
- V√©rifier que tous les seuils sont respect√©s
"""
                            
                            error("üö® PIPELINE ARR√äT√â - Quality Gate OWASP ZAP √©chou√©. Des vuln√©rabilit√©s de s√©curit√© critiques ont √©t√© d√©tect√©es.")
                            
                        } else {
                            echo "‚úÖ Quality Gate OWASP ZAP R√âUSSI!"
                            
                            // G√©n√©rer un rapport de succ√®s
                            writeFile file: 'security-reports/zap-quality-gate-success.txt', text: """
SUCC√àS DU QUALITY GATE OWASP ZAP
===============================
Build: ${BUILD_NUMBER}
Date: ${new Date()}
URL cible: ${TARGET_URL}

R√©sultats ZAP:
- Risque √âlev√©: ${zapResults.high ?: 'N/A'}
- Risque Moyen: ${zapResults.medium ?: 'N/A'}
- Risque Faible: ${zapResults.low ?: 'N/A'}
- Informationnel: ${zapResults.info ?: 'N/A'}

Toutes les conditions du quality gate ont √©t√© respect√©es.
L'application respecte les standards de s√©curit√© d√©finis.
"""
                        }
                        
                    } catch (Exception e) {
                        echo "‚ùå Erreur Quality Gate ZAP: ${e.message}"
                        error("üö® PIPELINE ARR√äT√â - Erreur lors de la v√©rification du Quality Gate OWASP ZAP")
                    }
                }
            }
        }

        stage('G√©n√©ration du rapport de s√©curit√© consolid√©') {
            steps {
                script {
                    echo "üìä G√©n√©ration du rapport de s√©curit√© consolid√©..."
                    
                    sh '''
                        # Cr√©er un rapport consolid√©
                        cat > security-reports/security-consolidated-report.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Rapport de S√©curit√© Consolid√© - Build ${BUILD_NUMBER}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 10px; }
        .section { background: white; margin: 20px 0; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .success { color: #28a745; font-weight: bold; }
        .warning { color: #ffc107; font-weight: bold; }
        .danger { color: #dc3545; font-weight: bold; }
        .metric { display: inline-block; margin: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px; }
        .footer { text-align: center; margin-top: 30px; color: #666; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üõ°Ô∏è Rapport de S√©curit√© Consolid√©</h1>
        <p>Build: ${BUILD_NUMBER} | Date: $(date) | Pipeline: ${JOB_NAME}</p>
    </div>
    
    <div class="section">
        <h2>üìã R√©sum√© des Quality Gates</h2>
        <div class="metric">
            <strong>SonarQube:</strong> <span class="success">‚úÖ R√âUSSI</span>
        </div>
        <div class="metric">
            <strong>OWASP ZAP:</strong> <span class="success">‚úÖ R√âUSSI</span>
        </div>
        <div class="metric">
            <strong>Trivy SCA:</strong> <span class="success">‚úÖ TERMIN√â</span>
        </div>
        <div class="metric">
            <strong>Image Scan:</strong> <span class="success">‚úÖ TERMIN√â</span>
        </div>
    </div>
    
    <div class="section">
        <h2>üîç Analyses Effectu√©es</h2>
        <ul>
            <li><strong>Analyse Statique (SAST):</strong> SonarQube - Qualit√© du code et s√©curit√©</li>
            <li><strong>Analyse des D√©pendances (SCA):</strong> Trivy - Vuln√©rabilit√©s des composants</li>
            <li><strong>Analyse de l'Image:</strong> Trivy - S√©curit√© des conteneurs</li>
            <li><strong>Analyse Dynamique (DAST):</strong> OWASP ZAP - Tests de p√©n√©tration</li>
            <li><strong>Signature:</strong> Cosign - Int√©grit√© des images</li>
        </ul>
    </div>
    
    <div class="section">
        <h2>üìä M√©triques de S√©curit√©</h2>
        <p>Tous les quality gates ont √©t√© respect√©s selon les seuils d√©finis.</p>
        <p>L'application est conforme aux standards de s√©curit√© de l'organisation.</p>
    </div>
    
    <div class="footer">
        <p>Rapport g√©n√©r√© automatiquement par le pipeline de s√©curit√©</p>
    </div>
</body>
</html>
EOF
                    '''
                    
                    echo "‚úÖ Rapport consolid√© g√©n√©r√©"
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage et archivage...'
            
            // Archiver tous les rapports de s√©curit√©
            archiveArtifacts artifacts: 'security-reports/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'zap-reports/**/*', allowEmptyArchive: true
            archiveArtifacts artifacts: 'trivy-reports/**/*', allowEmptyArchive: true
            
            // Publier les rapports HTML
            publishHTML([
                allowMissing: false,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'security-reports',
                reportFiles: 'security-consolidated-report.html',
                reportName: 'Rapport de S√©curit√© Consolid√©'
            ])
            
            // Publier le rapport ZAP si disponible
            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'security-reports',
                reportFiles: 'zap-baseline-report.html',
                reportName: 'Rapport OWASP ZAP'
            ])
            
            // Nettoyage
            sh '''
                rm -rf sonar-scanner-*
                rm -f *.zip
                docker system prune -f || true
            '''
        }

        success {
            echo '‚úÖ Pipeline termin√© avec succ√®s!'
            echo 'üõ°Ô∏è Tous les quality gates de s√©curit√© ont √©t√© respect√©s'
            
            // Notification de succ√®s
            emailext (
                subject: "‚úÖ Pipeline S√©curis√© R√©ussi - ${JOB_NAME} #${BUILD_NUMBER}",
                body: """
üéâ Pipeline de s√©curit√© termin√© avec succ√®s!

üìä R√©sum√©:
‚Ä¢ Build: ${BUILD_NUMBER}
‚Ä¢ Projet: ${JOB_NAME}
‚Ä¢ Statut: SUCC√àS

üõ°Ô∏è Quality Gates:
‚úÖ SonarQube - Code quality & security
‚úÖ OWASP ZAP - Dynamic security testing
‚úÖ Trivy - Dependency & container scanning
‚úÖ Cosign - Image signing

L'application est pr√™te pour le d√©ploiement s√©curis√©.

Consultez les rapports d√©taill√©s dans Jenkins.
                """,
                recipientProviders: [developers(), requestor()]
            )
        }

        unstable {
            echo '‚ö†Ô∏è Pipeline termin√© avec des avertissements!'
            echo 'üîç V√©rifiez les rapports pour plus de d√©tails'
        }

        failure {
            echo '‚ùå Pipeline √©chou√©!'
            echo 'üö® Des probl√®mes de s√©curit√© ont √©t√© d√©tect√©s'
            
            // Notification d'√©chec
            emailext (
                subject: "‚ùå Pipeline S√©curis√© √âchou√© - ${JOB_NAME} #${BUILD_NUMBER}",
                body: """
üö® Pipeline de s√©curit√© √©chou√©!

üìä D√©tails:
‚Ä¢ Build: ${BUILD_NUMBER}
‚Ä¢ Projet: ${JOB_NAME}
‚Ä¢ Statut: √âCHEC

üîç Actions requises:
‚Ä¢ V√©rifier les quality gates SonarQube
‚Ä¢ Examiner les vuln√©rabilit√©s ZAP
‚Ä¢ Corriger les probl√®mes identifi√©s
‚Ä¢ Relancer le pipeline

Consultez les logs Jenkins pour plus de d√©tails.
                """,
                recipientProviders: [developers(), requestor()]
            )
        }
    }
}
