pipeline {
    agent any
    
    environment {
        IMAGE_NAME = 'monapp'
        IMAGE_TAG = 'latest'
        SONARQUBE_ENV = 'SonarQube'
    }
    
    tools {
        // D√©finition de l'outil SonarScanner
        sonarScanner 'SonarQube'
    }
    
    stages {
        stage('Execute') {
            steps {
                echo 'üõ†Ô∏è Ex√©cution initiale...'
                sh 'echo "Commande ex√©cut√©e avant build."'
            }
        }
        
        stage('Build') {
            steps {
                echo 'üì¶ Construction de l\'image Docker...'
                sh 'docker build -t $IMAGE_NAME:$IMAGE_TAG .'
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Ex√©cution des tests...'
                // Exemple : Ex√©cution d'un test basique
                sh 'echo "Tests ex√©cut√©s (√† remplacer par de vrais tests)"'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                echo 'üîé Analyse de code avec SonarQube...'
                withSonarQubeEnv(credentialsId: "${SONARQUBE_ENV}") {
                    sh '''
                        sonar-scanner \
                        -Dsonar.projectKey=monapp \
                        -Dsonar.projectName='Mon Application' \
                        -Dsonar.sources=. \
                        -Dsonar.exclusions=**/node_modules/**,**/vendor/**
                    '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Attendre et v√©rifier le Quality Gate de SonarQube
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Scan') {
            steps {
                echo 'üîç Scan de s√©curit√© avec Trivy...'
                // Trivy doit √™tre install√© sur la machine Jenkins
                sh 'trivy image --severity CRITICAL,HIGH $IMAGE_NAME:$IMAGE_TAG'
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'üöÄ D√©ploiement de l\'application...'
                // Supprimer le conteneur s'il existe d√©j√†
                sh 'docker rm -f monapp_container || true'
                // Lancer l'image build√©e
                sh 'docker run -d --name monapp_container -p 8080:80 $IMAGE_NAME:$IMAGE_TAG'
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s!'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©.'
        }
        always {
            echo 'Nettoyage et finalisation...'
        }
    }
}
